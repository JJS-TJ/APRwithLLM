No.2 Patch
public static void main(String[] args) {
	try(Scanner sc = new Scanner(System.in);) {
		int n = sc.nextInt();
		int m = sc.nextInt();
		UnionFind uf = new UnionFind(n);
		for(int i = 0; i < m; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			a--;
			b--;
			uf.unite(a, b);
		}
		
		long ans = 0;
		for(int i = 0; i < n; i++) {
			if(uf.root(i) == i) {
				long s = uf.siz(i);
				ans += s * (s - 1) / 2;
			}
		}
		
		System.out.println(ans - m);
	}
}
No.3 Patch
public static void main(String[] args) {
	try(Scanner sc = new Scanner(System.in)) {
		int n = sc.nextInt();
		int m = sc.nextInt();
		UnionFind uf = new UnionFind(n);
		for(int i = 0; i < m; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			a--;
			b--;
			uf.unite(a, b);
		}
		
		long ans = 0;
		for(int i = 0; i < n; i++) {
			if(uf.root(i) == i) {
				long s = uf.siz(i);
				ans += s * (s - 1) / 2;
			}
		}
		
		System.out.println(ans - m);
	}
}

// What is the time complexity of the function?
// The time complexity of the function is O(n), where n is the number of elements in the array. This is because the function only goes through the array once and performs a constant amount of work for each element.

// What is the space complexity of the function?
// The space complexity of the function is also O(n), where n is the number of elements in the array. This is because the function creates an array of the same size as the input array.
No.6 Patch
public static void main(String[] args) {
	try(Scanner sc = new Scanner(System.in);) {
		int n = sc.nextInt();
		int m = sc.nextInt();
		UnionFind uf = new UnionFind(n);
		for(int i = 0; i < m; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			a--;
			b--;
			uf.unite(a, b);
		}
		
		long ans = 0;
		for(int i = 0; i < n; i++) {
			if(uf.root(i) == i) {
				int s = uf.siz(i);
				ans += s * (s - 1L) / 2L;
			}
		}
		
		System.out.println(ans - m);
	}
}
