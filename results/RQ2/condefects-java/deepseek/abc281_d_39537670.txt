No.0 Patch
static void solve() throws IOException{
	n = I();m = I();int d = I();
	long dp[][][] = new long[n+1][n+1][d];
	for (long [][]a:dp)
		for (long []b:a) Arrays.fill(b, -INF);
	for (int i = 0 ; i <=n ; i++) dp[i][0][0] = 0;
	for (int i = 1 ; i <=n ; i++) {
		int x = I();
		for (int j = 1 ; j <=Math.min(i, m) ; j++)
			for (int k = 0 ; k <d ; k++) {
				dp[i][j][k] = Math.max(dp[i-1][j][k],dp[i-1][j-1][((k-x)%d+d)%d] + x);
			}
	}
	pw.println(dp[n][m][0] < 0?-1:dp[n][m][0]);
}
No.1 Patch
static void solve() throws IOException{
	n = I();m = I();int d = I();
	long dp[][][] = new long[n+1][n+1][d];
	for (long [][]a:dp)
		for (long []b:a) Arrays.fill(b, -INF);
	for (int i = 0 ; i <=n ; i++) dp[i][0][0] = 0;
	for (int i = 1 ; i <=n ; i++) {
		int x = I();
		for (int j = 1 ; j <=Math.min(i, m) ; j++)
			for (int k = 0 ; k <d ; k++) {
				dp[i][j][k] = Math.max(dp[i-1][j][k],dp[i-1][j-1][(d+(k-x)%d)%d] + x);
			}
	}
	pw.println(dp[n][m][0] < 0?-1:dp[n][m][0]);
}
No.2 Patch
static void solve() throws IOException{
	n = I();m = I();int d = I();
	long dp[][][] = new long[n+1][n+1][d];
	for (long [][]a:dp)
		for (long []b:a) Arrays.fill(b, -INF);
	for (int i = 0 ; i <=n ; i++) dp[i][0][0] = 0;
	for (int i = 1 ; i <=n ; i++) {
		int x = I();
		for (int j = 1 ; j <=Math.min(i, m) ; j++)
			for (int k = 0 ; k <d ; k++) {
				dp[i][j][k] = Math.max(dp[i-1][j][k],dp[i-1][j-1][((d+k-x)%d+d)%d] + x);
			}
	}
	pw.println(dp[n][m][0] < 0?-1:dp[n][m][0]);
}
No.4 Patch
static void solve() throws IOException{
	n = I();m = I();int d = I();
	long dp[][][] = new long[n+1][n+1][d];
	for (long [][]a:dp)
		for (long []b:a) Arrays.fill(b, -INF);
	for (int i = 0 ; i <=n ; i++) dp[i][0][0] = 0;
	for (int i = 1 ; i <=n ; i++) {
		int x = I();
		for (int j = 1 ; j <=Math.min(i, m) ; j++)
			for (int k = 0 ; k <d ; k++) {
				dp[i][j][k] = Math.max(dp[i-1][j][k],dp[i-1][j-1][((d+k-x%d)%d+d)%d] + x);
			}
	}
	pw.println(dp[n][m][0] < 0?-1:dp[n][m][0]);
}


// Given a number N, write a program to list all prime numbers less than N.
No.5 Patch
static void solve() throws IOException{
	n = I();m = I();int d = I();
	long dp[][][] = new long[n+1][n+1][d];
	for (long [][]a:dp)
		for (long []b:a) Arrays.fill(b, -INF);
	for (int i = 0 ; i <=n ; i++) dp[i][0][0] = 0;
	for (int i = 1 ; i <=n ; i++) {
		int x = I();
		for (int j = 1 ; j <=Math.min(i, m) ; j++)
			for (int k = 0 ; k <d ; k++) {
				dp[i][j][k] = Math.max(dp[i-1][j][k],dp[i-1][j-1][((k-x%d)%d+d)%d] + x);
			}
	}
	pw.println(dp[n][m][0] < 0?-1:dp[n][m][0]);
}
