No.1 Patch
void solve() {
    int n = in.nextInt();
    list = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        int x = in.nextInt();
        int y = in.nextInt();
        list.add(new IntPair(x + y, x - y));
    }
    list.sort(Comparator.<IntPair>comparingInt(p -> p.second).thenComparingInt(p -> p.first));
    WaveletMatrix<IntPair> wm = new WaveletMatrix<>(list);
    int q = in.nextInt();
    for (int i = 0; i < q; i++) {
        int a = in.nextInt();
        int b = in.nextInt();
        int c = a + b;
        int d = a - b;
        int k = in.nextInt();
        int left = -1;
        int right = 500000;
        while (right - left > 1) {
            int mid = (left + right) / 2;
            int ll = lowerBound(list, d - mid);
            int rr = upperBound(list, d + mid);
            int count = 0;
            if (ll < rr) {
                count = wm.rangeFreq(new IntPair(c - mid, -iinf), new IntPair(c + mid + 1, -iinf), ll, rr);
            }
            if (count >= k) {
                right = mid;
            } else {
                left = mid;
            }
        }
        out.println(right);
    }
}

// In some sorting algorithms, we might not need to sort the array if it is already sorted. We can add a check for this before sorting the array.
