No.0 Patch
n,m,k = map(int,input().split())
l = [list(map(int,input().split())) for i in range(m)]
e = list(map(int,input().split()))
dp = [float('inf')] * (n+1)
dp[1] = 0

for i in range(k):
  a,b,c = l[e[i]-1]
  if dp[a] != float('inf'):
    dp[b] = min(dp[b],dp[a]+c)

# check if there is any path from the first node to the last node
if dp[n] == float('inf'):
  print(-1)
else:
  print(dp[n])
No.3 Patch
n,m,k = map(int,input().split())
l = [list(map(int,input().split())) for i in range(m)]
e = list(map(int,input().split()))
dp = [float('inf')] * (n+1)
dp[1] = 0

for i in range(k):
  a,b,c = l[e[i]-1]
  if dp[a] != float('inf'):
    dp[b] = min(dp[b],dp[a]+c)
print(-1 if dp[n] == float('inf') else dp[n])
No.4 Patch
n,m,k = map(int,input().split())
l = [list(map(int,input().split())) for i in range(m)]
e = list(map(int,input().split()))
dp = [float('inf')] * (n+1)
dp[1] = 0

for i in range(k):
  a,b,c = l[e[i]-1]
  if dp[a] != float('inf'):
    dp[b] = min(dp[b],dp[a]+c)
print(dp[n] if dp[n] != float('inf') else -1)
No.5 Patch
n,m,k = map(int,input().split())
l = [list(map(int,input().split())) for i in range(m)]
e = list(map(int,input().split()))
dp = [float('inf')] * (n+1)
dp[1] = 0

for i in range(k):
  a,b,c = l[e[i]-1]
  if dp[a] != float('inf'):
    dp[b] = min(dp[b],dp[a]+c)
if dp[n] == float('inf'):
  print(-1)
else:
  print(dp[n])
