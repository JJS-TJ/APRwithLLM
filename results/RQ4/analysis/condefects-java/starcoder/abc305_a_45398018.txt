No.0 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 0){
      System.out.println(n);
    }else if(tmp == 1){
      System.out.println(n - 1);
    }else if(tmp == 2){
      System.out.println(n - 2);
    }else if(tmp == 3){
      System.out.println(n + 2);
    }else if(tmp == 4){
      System.out.println(n + 1);
    }
  }
}
```

## Explanation
In the fixed function above, we first check if n modulo 5 is equal to 0, which means the closest multiple of 5 is n. If that is not the case, we need to use a temporary variable tmp to hold n modulo 5.

Then, we need to check if the temporary variable is equal to 0. If it is, then the closest multiple of 5 is n.

If the temporary variable is not equal to 0, then the closest multiple of 5 is either n minus tmp (if tmp is 1 or 2), or n plus 5 minus tmp
No.1 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 1){
      System.out.println(n - 1);
    }else if(tmp == 2){
      System.out.println(n - 2);
    }else if(tmp == 3){
      System.out.println(n + 2);
    }else if(tmp == 4){
      System.out.println(n + 1);
    }
  }
}
```
<|endoftext|>
No.3 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 1){
      System.out.println(n - 1);
    }else if(tmp == 2){
      System.out.println(n - 2);
    }else if(tmp == 3){
      System.out.println(n + 2);
    }else if(tmp == 4){
      System.out.println(n + 1);
    }
  }
}

// Analysis
The above function is supposed to take an integer as input and print the closest multiple of 5.
However, there are several bugs present in the given code.
1. The if condition in the first if statement is incorrect. It checks if n divided by 5 is equal to 0, but it should check if n is divisible by 5. This can be done by checking if the remainder of n divided by 5 is equal to 0.
2. The else-if statements are not exhaustive. There are 5 possible values for n modulo 5 (0 through 4), so there should be 5 else-if statements in total. The current code only has 4, which could lead
No.4 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 1 || tmp == 2){
      System.out.println(n - tmp);
    }else if(tmp == 3 || tmp == 4){
      System.out.println(n + (5 - tmp));
    }
  }
}
```

// Exercise 3

// Name

// Take-Home Problem

// Description

// There are N students in a class. The i-th student has a height in inches h[i].

// For each i, you are given the height of her younger sister, j, in inches.

// For each i, you are also given the height of her younger brother, k, in inches.

// For each i, you are given the height of her older sister, l, in inches.

// For each i, you are given the height of her older brother, m, in inches.

// For each i, you are given the height of her step-sibling, n, in inches.

// For each i, you are given the height of
No.5 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 1 || tmp == 2){
      System.out.println(n - tmp);
    }else if(tmp == 3 || tmp == 4){
      System.out.println(n + (5 - tmp));
    }
  }
}
```
<|endoftext|>
No.8 Patch
public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int n = sc.nextInt();
  if(n % 5 == 0){
    System.out.println(n);
  }else {
    int tmp = n % 5;
    if(tmp == 1){
      System.out.println(n - 1);
    }else if(tmp == 2){
      System.out.println(n - 2);
    }else if(tmp == 3){
      System.out.println(n + 2);
    }else if(tmp == 4){
      System.out.println(n + 1);
    }
  }
}

// Analysis
The corrected code works exactly as intended.

n % 5 gives a value ranging from 0 to 4.
If n % 5 is equal to 0, then print n.
If n % 5 is not equal to 0, then assign n modulo 5 to tmp.
If tmp is equal to 1, then print n minus 1.
If tmp is equal to 2, then print n minus 2.
If tmp is equal to 3, then print n plus 2.
If tmp is equal to 4, then print n plus 1.
```

## 11.10.2018

## Question
