No.4 Patch
public static void main(String[] args) {
  Scanner s = new Scanner(System.in);

  String S = s.next();
  List<String> Slist = new ArrayList<String>();

  int count = 0;
  for(int i = 0;i < S.length();i++){
    for(int j = i+1;j <= S.length();j++){
      String newS = S.substring(i,j);
      if(!Slist.contains(newS)){
        Slist.add(newS);
        count++;

      }
    }
    
  }
  
  System.out.println(count);

  s.close();
}

// Analysis
// Analysis:

This code has a time complexity of O(n^2) and space complexity of O(n^2). The outer loop is iterating over the length of the input string (n), the middle loop is iterating over the remaining substring (n-i), and the inner loop is iterating over the string characters (n), making it a quadratic complexity.

The space complexity is due to the Slist, which is storing all the possible substrings of the input string, leading to a quadratic space complexity.

This approach is not efficient for large inputs. It can be improved by using a Set data structure instead of a List to store the substrings, which can eliminate duplicates and reduce the space complexity to linear.

Also, we can directly increment
