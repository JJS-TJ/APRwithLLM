No.0 Patch
from itertools import combinations

N, M = list(map(int, input().split()))
flavors_of_stands = []
for _ in range(N):
    s = int("".join(list(map(lambda x: '1' if x == 'o' else '0', input()))), base=2)
    flavors_of_stands.append(s)
total = 2 ** M - 1
for i in range(1, N + 1):
    all_cases = combinations(range(N), i)
    for case in all_cases:
        cur_ans = 0
        for idx in case:
            cur_ans |= flavors_of_stands[idx]
        if cur_ans == total:
            print(len(case))
            exit(0)<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>
No.2 Patch
from itertools import combinations

# Read input
N, M = map(int, input().split())
stands = []
for _ in range(N):
    stand = input().replace('o', '1').replace('x', '0')
    stands.append(int(stand, 2))

# Calculate total flavors
total = 2 ** M - 1

# Check all possible combinations
for i in range(1, N+1):
    for comb in combinations(range(N), i):
        open_flavors = 0
        for idx in comb:
            open_flavors |= stands[idx]
        if open_flavors == total:
            print(i)
            exit(0)<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>
No.3 Patch
from itertools import combinations

def solve(N, M, flavors_of_stands):
    total = 2 ** M - 1
    for i in range(1, N + 1):
        all_cases = combinations(range(N), i)
        for case in all_cases:
            cur_ans = 0
            for idx in case:
                cur_ans |= flavors_of_stands[idx]
            if cur_ans == total:
                return len(case)

N, M = list(map(int, input().split()))
flavors_of_stands = []
for _ in range(N):
    s = int("".join(list(map(lambda x: '1' if x == 'o' else '0', input()))), base=2)
    flavors_of_stands.append(s)

print(solve(N, M, flavors_of_stands))<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>
