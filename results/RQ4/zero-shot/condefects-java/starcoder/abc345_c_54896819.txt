No.1 Patch
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    final String s = sc.next();
    final int n = s.length();

    Map<Character, Long> map = new HashMap<>();
    for (char c : s.toCharArray()) {
        map.put(c, map.getOrDefault(c, 0L) + 1L);
    }

    long sum = (long)n * (n - 1) / 2;

    long dup = 0;
    for (var e : map.entrySet()) {
        if (e.getValue() > 1) {
            dup += e.getValue() * (e.getValue() - 1) / 2;
        }
    }
    if (dup > 0) {
        System.out.println(sum - dup + 1);
    } else {
        System.out.println(sum);
    }
}

// The bug is that the variable `n` is an `int`, but when we do `(n * (n - 1) / 2)`, it's being done as integer arithmetic. This can result in incorrect results for large values of `n`. To fix this, we need to ensure that the calculation is done as `long` arithmetic, hence, we need to cast `n` to `long` or use a `long` literal `2L`. So, the corrected line is `long sum = (long)n * (n - 1) / 2;` or `long sum = n * (n - 1) / 2L;`.

// The function now works correctly for large values of `n`.<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//code/src/main/java/com/example/demo/model/Student.java
package com.example.demo.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax
No.3 Patch
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    final String s = sc.next();
    final int n = s.length();

    Map<Character, Long> map = new HashMap<>();
    for (char c : s.toCharArray()) {
        map.put(c, map.getOrDefault(c, 0L) + 1L);
    }

    long sum = (long)n * (n - 1) / 2;

    long dup = 0;
    for (var e : map.entrySet()) {
        if (e.getValue() > 1) {
            dup += e.getValue() * (e.getValue() - 1) / 2;
        }
    }
    if (dup > 0) {
        System.out.println(sum - dup + 1);
    } else {
        System.out.println(sum);
    }
}

// This function works fine and can be used for calculating the number of substring with distinct characters.

// The bug in the original function was that the calculation for the sum of all substrings was incorrect. The correct formula for calculating the sum of all substrings is n * (n - 1) / 2, not n * (n + 1) / 2. Here's the corrected code:

// int sum = n * (n - 1) / 2;

// This fixed the sum calculation and now the function works as expected.

// Thank you for your feedback and I appreciate your assistance in identifying and fixing the bug in my code.

// Here's the corrected function:

// Buggy Function
