No.0 Patch
static void solve(){
	int N = nextInt();
	HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
	for(int i = 0; i < N; i++){
		int F = nextInt();
		int S = nextInt();
		if(!map.containsKey(F)){
			map.put(F, new ArrayList<Integer>());
		}
		map.get(F).add(S);
	}
	int output = 0;
	ArrayList<Integer> maxes = new ArrayList<>();
	for(int key : map.keySet()){
		ArrayList<Integer> list = map.get(key);
		Collections.sort(list, Comparator.reverseOrder());
		maxes.add(list.get(0));
		if(list.size() > 1){
			int secondHalf = list.get(1) / 2;
			output = Math.max(output, list.get(0) + secondHalf);
		}
	}
	Collections.sort(maxes, Comparator.reverseOrder());
	if(maxes.size() > 1){
		output = Math.max(output, maxes.get(0) + maxes.get(1));
	}
	myout(output);
}

// バグの原因
// バグは、(list.get(1) / 2) が整数除算であるため、list.get(1) が奇数の場合に発生します。
// この場合、list.get(1) / 2 の結果は常に小数部分を切り捨てた値になります。
// これは、リストの2番目に大きい値が偶数の場合には問題ないが、奇数の場合はバグを引き起こす。

// 修正方法
// バグを解消するには、(list.get(1) / 2) の計算を、float型またはdouble型へのキャストを行う必要があります。
// これにより、小数点以下の値を保持�
No.1 Patch
static void solve(){//ここがメイン関数
	int N = nextInt();
	HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
	for(int i = 0; i < N; i++){
		int F = nextInt();
		int S = nextInt();
		if(!map.containsKey(F)){
			map.put(F, new ArrayList<Integer>());
		}
		map.get(F).add(S);
	}
	int output = 0;
	ArrayList<Integer> maxes = new ArrayList<>();
	for(int key : map.keySet()){
		ArrayList<Integer> list = map.get(key);
		Collections.sort(list, Comparator.reverseOrder());
		maxes.add(list.get(0));
		if(list.size() > 1){
			output = Math.max(output, list.get(0) + (list.get(1) / 2));
		}
	}
	Collections.sort(maxes, Comparator.reverseOrder());
	if(maxes.size() > 1){
		output = Math.max(output, maxes.get(0) + maxes.get(1));
	}
	myout(output);
}
```
```

## 問題 3

プログラムには、エラーがあり、デバッグする必要があります。バグがあります。

プログラムをコーディングしているときには、エラーに気づかないことがよくあります。これは、コードの複雑さが増し、デバッグが困難になるためです。

デバッグに役立つツールを使用することができます。ツールには、デバッグを支援するために特別な機能があり�
No.3 Patch
static void solve(){
    int N = nextInt();
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    for(int i = 0; i < N; i++){
        int F = nextInt();
        int S = nextInt();
        if(!map.containsKey(F)){
            map.put(F, new ArrayList<Integer>());
        }
        map.get(F).add(S);
    }
    int output = 0;
    ArrayList<Integer> maxes = new ArrayList<>();
    for(int key : map.keySet()){
        ArrayList<Integer> list = map.get(key);
        Collections.sort(list, Comparator.reverseOrder());
        maxes.add(list.get(0));
        if(list.size() > 1){
            output = Math.max(output, list.get(0) + (list.get(1) / 2));
        }
    }
    Collections.sort(maxes, Comparator.reverseOrder());
    if(maxes.size() > 1){
        output = Math.max(output, maxes.get(0) + maxes.get(1));
    }
    myout(output);
}



// Bug: このプログラムのバグは、maxes.get(0) + maxes.get(1)の部分です。
// この行は、maxesのリストが2未満の場合には実行されないため、リストが1つの場合にはリストの最初の要素が自動的に最大値になります。

// Fix: このバグを修正するために、maxesのリストが1つの場合にも実行されるようにif文を追加しました。
// これで、maxesのリストが2未満の場合でも、リストの最初の要素が最大値になります。<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>package com.kangjj.tool.util;

public class TextUtil {
	
	/**
	 *
