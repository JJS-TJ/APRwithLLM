No.5 Patch
public static void main(String[] args){
  Scanner sc = new Scanner(System.in);
  int A = sc.nextInt();
  int B = sc.nextInt();

  if(B-A == 1 && A % 3 != 0) System.out.println("Yes");
  else System.out.println("No");  
}

// This code will now work as expected and will print "Yes" if the difference between B and A is 1 and A is not divisible by 3, otherwise it will print "No".<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given a string s, find the length of the longest substring without repeating characters.

// Example 1:
// Input: s = "abcabcbb"
// Output: 3
// Explanation: The answer is "abc", with the length of 3.

// Example 2:
// Input: s = "bbbbb"
// Output: 1
// Explanation: The answer is "b", with the length of 1.

// Example 3:
// Input: s = "pwwkew"
// Output: 3
// Explanation: The answer is "wke", with the length of 3.
// Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

// Solution

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();

        int res = 0;

        for (int i = 0; i < n; i++) {
            boolean[] visited = new boolean[256];

            for (int j = i; j < n; j++) {
                if (visited[s.charAt(j)] == true)
                    break;

                else {
                    res = Math.max(res, j - i + 1);
                    visited[s.char
