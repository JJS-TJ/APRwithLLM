No.3 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    // x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3
    return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);
}

// The bug was that the multiplication of the two fractions was not being done with long variables, which could result in an overflow. By casting the multiplication to long, the bug is fixed.<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given an array of integers, find the one that appears an odd number of times.

// There will always be only one integer that appears an odd number of times.

public class FindOdd {
    public static int findIt
No.4 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given an array of integers, determine whether the sum of its elements is odd or even.
// Give your answer as a string matching "odd" or "even".
// If the input array is empty consider it as: [0] (array with a zero).

// My solution
import java.util.Arrays;

public class Codewars {
  public static String oddOrEven (int[] array) {
    int sum = Arrays.stream(array).sum();
    return sum % 2 == 0 ? "even
No.5 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    // x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3
    return (long) (y1 - y2) * (x1 - x3) == (x1 - x2) * (long) (y1 - y3);
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//src/main/java/com/example/demo/entity/Book.java
package com.example.demo.entity;

import lombok.Data;

import javax.persistence.*;

@Data
@Entity
@Table(name = "books")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private
No.6 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    // x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3
    return (long) (y1 - y2) * (x1 - x3) == (x1 - x2) * (long) (y1 - y3);
}

// Test cases
System.out.println(check(0, 0, 1, 1, 2, 2)); // true
System.out.println(check(0, 0, 1, 1, 2, 3)); // false
System.out.println(check(1, 1, 2, 2, 3, 3)); // true<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// The aim
No.7 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    // (y1 - y2) / (x1 - x2) == (y1 - y3) / (x1 - x3)
    return (long) (y1 - y2) * (x1 - x3) == (long) (y1 - y3) * (x1 - x2);
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>/*
You are given a list of unique integers arr, and two integers a and b. 
Your task is to find out whether or not a and b appear consecutively in arr, 
and return a boolean value (True if a and b are consecutive, False otherwise).

It is guaranteed that a and b are both present in arr.
*/

public class Kata {
No.8 Patch
public static boolean check(int x1, int y1, int x2, int y2, int x3, int y3) {
    // x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3
    return (long) (y1 - y2) * (x1 - x3) == (x1 - x2) * (long) (y1 - y3);
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>package com.zohocrm.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.zohocrm.ut
