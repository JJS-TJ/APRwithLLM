No.0 Patch
long choose(int n,int r){
    if(map[n][r] != 0){
        return map[n][r];
    }
    if(n == r) {
        return 1;
    }
    if(r == 0){
        return 1;
    }

    long ans = choose(n-1, r-1) + choose(n-1, r);
    map[n][r] = ans % mod;
    return map[n][r];
}

// The bug was the use of choose(n, r-1) + choose(n-1, r) instead of choose(n-1, r-1) + choose(n-1, r)


// Buggy Function
No.4 Patch
long choose(int n, int r){
    if(r > n) return 0;
    if(map[n][r] != 0){
        return map[n][r];
    }
    if(n == r) {
        return 1;
    }
    if(r == 0){
        return 1;
    }

    long ans = (choose(n-1, r-1) % mod + choose(n-1, r) % mod) % mod;
    map[n][r] = ans % mod;
    return map[n][r];
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given an array of n integers where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that: 

// Each student gets one packet.
// The difference between the number of chocolates in the packet with maximum chocolates and the packet with minimum chocolates given to the students is minimum.

#include
No.5 Patch
long choose(int n,int r){
    if(r>n/2)
        r=n-r; // Since nCr = nC(n-r)
    if(map[n][r] != 0){
        return map[n][r];
    }
    if(n == r) {
        return 1;
    }
    if(r == 0){
        return 1;
    }

    long ans = choose(n-1, r-1) + choose(n-1, r);
    map[n][r] = ans % mod;
    return map[n][r];
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given two integers a and b, 
// we need to compute the power of a to the power b using binary exponentiation.

#include<bits/stdc++.h>
using namespace std;

// recursive method
long long binExp(long long a, long long b){
    if(b == 0)
        return 1;
    long long res = bin
No.9 Patch
long choose(int n,int r){
    if(map[n][r] != 0){
        return map[n][r];
    }
    if(r == 0){
        map[n][r] = 1;
        return map[n][r];
    }
    if(n == r) {
        map[n][r] = 1;
        return map[n][r];
    }

    long ans = (choose(n-1, r) + choose(n-1, r-1)) % mod;
    map[n][r] = ans;
    return map[n][r];
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Provide a fix for the buggy function

// Buggy Function
