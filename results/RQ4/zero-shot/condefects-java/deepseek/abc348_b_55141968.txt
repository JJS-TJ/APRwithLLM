No.0 Patch
public static void main(String[] args){
    Scanner sc = new Scanner(System.in); 
    int n = Integer.parseInt(sc.next());
    
    List<XY> xy = new ArrayList<XY>();
    
    for(int i = 0; i < n; i++){
        xy.add(new XY(Integer.parseInt(sc.next()), Integer.parseInt(sc.next())));
    }
    sc.close();
    
    for(int i = 0; i < n; i++){
        float farthestDist = 0;
        int farthestPoint = 0;
        for(int j = 0; j < n; j++){
            
            float calc = (float)Math.sqrt((Math.pow(xy.get(i).x - xy.get(j).x, 2)) + (Math.pow(xy.get(i).y - xy.get(j).y, 2)));
            if(i == j){
                continue; // skip the current index if it is the same as the outer loop index
            }
            else if(farthestDist < calc){
                farthestDist = calc;
                farthestPoint = j+1;
            }
        }
        System.out.println(farthestPoint);
    }
}

// The bug in the original code was that it was printing the farthest point for each iteration of the outer loop, 
// which is not what the problem asked for. The corrected code now only prints the farthest point after each iteration 
// of the outer loop, as requested. Additionally, the "else if" condition was skipping the current iteration if the 
// indices were the same, which was not the intended behavior. The "continue" statement was added to skip the current 
// iteration when this condition was met.<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int Q = Integer.parseInt(st.nextToken());

        int[][] arr = new int[N+1][N+1];
        for(int i = 1; i <= N; i++){
            st = new StringTokenizer(
