No.7 Patch
private static String solve(int n, int m, int k, int[] a) {
    long ans = 0L;
    for (int i = 1; i <= m; i++) {
        int rem = n + 1 - k;
        int zero = 0;
        for (int j : a) {
            if (j >= i) rem--;
            if (j == 0) zero++;
        }
        if (rem < 0 || rem > zero) {
            ans += (rem < 0 ? 1 : 0);
            continue;
        }
        long p = ((m + 1 - i) % MOD + MOD) % MOD;
        p = p * quickPow(m, MOD - 2) % MOD;
        long[] pPow = new long[zero + 1];
        long[] qPow = new long[zero + 1];
        Arrays.fill(pPow, 1);
        Arrays.fill(qPow, 1);
        for (int j = 0; j < zero; j++) {
            pPow[j + 1] = (pPow[j] * p % MOD + MOD) % MOD;
            qPow[j + 1] = (qPow[j] * (1 - p) % MOD + MOD) % MOD;
        }
        for (int j = rem; j <= zero; j++) {
            long x = binom[zero][j] * pPow[j] % MOD * qPow[zero - j] % MOD;
            ans = (ans + x) % MOD;
        }
    }
    return String.valueOf(ans);
}

// You should calculate the modular multiplicative inverse of `m` by using the `quickPow()` function.
// So, replace the line `long p = (m + 1 - i) / m;` with the line `long p = (m + 1 - i) * quickPow(m, MOD - 2);`.
// The `quickPow()` function is used to calculate the power of a number in the modulo space.
// You need to replace `(m + 1 - i) / m` with `(m + 1 - i) * quickPow(m, MOD - 2)`.
// This will correctly calculate the modular multiplicative inverse of `m`.
// `quickPow(m, MOD - 2)` calculates the modular multiplicative inverse of `m` under modulo `MOD`.
// In the end, you should add the modulo operation `% MOD` to all the arithmetic operations to keep the values within the modulo space.
// So, replace all occurrences of `(m + 1 - i) / m` with `(m + 1 - i) * quickPow(m, MOD - 2) % MOD`.
