No.4 Patch
public static void main(String[] args){
  
  Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  
  String S = sc.next();
  String judge = "ABC";
  
  if (S.length() > N){
    S = S.substring(0, N);
  }

  int result = S.indexOf(judge);
  
  if (result >= 0){
    result = result + 1;
  }
  System.out.println(result);
} 

// Explanation
// The buggy function was checking if the result was greater than 0 and if it was, adding 1 to it. But this would not work for the case where 'ABC' is at the 0th index, as the result would still be 0. So, we need to check if the result is greater than or equal to 0, not just greater than. 
// Also, we need to ensure that we take only the first N characters from the string if its length is greater than N. 
// This will fix the bug and provide the correct result.
<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//src/main/java/com/example/entity/Stud
No.6 Patch
public static void main(String[] args){
  
  Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  
  String S = sc.next();
  String judge = "ABC";
  
  if (S.length() > N){
    S = S.substring(0, N);
  }

  int result = S.indexOf(judge);
  
  if (result != -1){
    result = result + 1;
  }
  System.out.println(result);
}

// The buggy function was indexing through an array of size N but then trying to print out the result from a string of length S.length()
// The fixed function only indexes through the array of size N and also checks if the result is not -1 to prevent an output of 0
// when the judge string is not found. If the string is not found, indexOf() returns -1.
<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>import java.util.Scanner;
public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
No.8 Patch
public static void main(String[] args){
  
  Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  
  String S = sc.next();
  String judge = "ABC";
  
  int result = S.indexOf(judge);
  int len = S.length();
  
  if (len > N){
    S = S.substring(0, N);
  }

  if (result >= 0){
    result = result + 1;
  }
  System.out.println(result);
} 

// Explanation:
// The bug was in the if condition. Here, the condition was checking if the index is greater than 0. But, indexOf() method returns -1 when the substring is not found.
// So, we should check for result >= 0, because index can also be 0. If index is 0, then it means substring starts from the first index itself. So, adding 1 to it will give us the correct position.
// In Java, if the substring is not found, indexOf() method will return -1. So, it should be result >= 0, not result > 0.
<｜end▁of▁sentence｜>
