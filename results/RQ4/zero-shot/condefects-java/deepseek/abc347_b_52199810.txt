No.2 Patch
public static void main(String[] args) {
  Scanner s = new Scanner(System.in);

  String S = s.next();
  List<String> Slist = new ArrayList<String>();

  int count = 0;
  for(int i = 0;i < S.length();i++){
    for(int j = i+1;j <= S.length();j++){
      String newS = S.substring(i,j);
      if(!Slist.contains(newS)){
        Slist.add(newS);
        count++;

      }
    }
    
  }
  
  System.out.println(count);

  s.close();
}

// The bug was in the second loop, it should be "j <= S.length()" instead of "j < S.length()".
// If we want to include the last character of the string, we need to go till the length of the string.<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>/*
  Problem:
  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.
  You can return the answer in any order.
  
  Example:
  Input: nums = [2,7,11,15], target = 9
  Output: [0,1]
  Output: Because nums[0]
