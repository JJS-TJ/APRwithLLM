No.0 Patch
static void solve() {
	int n = nextInt();
	boolean[] b = new boolean[361];
	b[0] = true;
	b[360] = true;
	int pos = 0;
	
	for (int i=0; i<n; i++) {
		int temp = nextInt();
		pos += temp;
		pos %= 360;
		b[pos] = true;
	}
	
	int max = -1;
	int count = -1;
	for (int i=0; i<=360; i++) {
		if (b[i] == true) {
			max = Math.max(max, count);
			count = 1;
		}
		else {
			count++;
		}
	}
	println(max);
}
<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//
//  BNHUITableViewCell.h
//  BNHUITableView
//
//  Created by 毕淇杭 on 16/1/26.
//  Copyright © 2016年 毕淇杭. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface BNHUITableViewCell : UITableViewCell

@property (nonatomic, strong) UILabel *myLabel;

@end<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//
//  BNHUITableViewController.h
//  BNHUITableView
//
//  Created by 毕淇杭 on 16/1/26.
//  Copyright © 2016年 毕淇杭. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface BNHUITableViewController : UITableViewController

@end<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//
//
No.1 Patch
static void solve () {
	
	int n = nextInt();
	boolean[] b = new boolean[361];
	b[0] = true;
	b[360] = true;
	int pos = 0;
	
	for (int i=0; i<n; i++) {
		int temp = nextInt();
		pos += temp;
		pos %= 360;
		b[pos] = true;
	}
	
	int max = -1;
	int count = -1;
	boolean flag = true;
	for (int i=0; i<=360; i++) {
		if (b[i] == true) {
//				println(count);
			max = Math.max(max, count);
			count = 1;
		}
		else {
			count++;
		}
	}
	println(max);
	
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Given the root of a binary tree, return the length of the diameter of the tree.

// The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

// The length of a path between two nodes is represented by the number of edges between them.

 

// Example 1:


// Input: root = [1,2,3,4,5]
// Output: 3
// Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
// Example 2:

// Input: root = [1,2]
// Output: 1
 

// Constraints:

// The number of nodes in the tree is in the range [1, 104].
// -100 <= Node.val <= 100

// Solution:
No.5 Patch
static void solve () {
	
	int n = nextInt();
	boolean[] b = new boolean[361];
	b[0] = true;
	b[360] = true;
	int pos = 0;
	
	for (int i=0; i<n; i++) {
		int temp = nextInt();
		pos += temp;
		pos %= 360;
		b[pos] = true;
	}
	
	int max = -1;
	int count = -1;
	boolean flag = true;
	for (int i=0; i<=360; i++) {
		if (b[i] == true) {
//				println(count);
			max = Math.max(max, count);
			count = 1;
		}
		else {
			count++;
		}
	}
	println(max);
	
}

// Explanation
// This problem is asking to find the maximum number of consecutive degrees that are not cut. The problem is with the line where it prints count which is the degree that is not cut. The correct print statement should print the maximum number of consecutive degrees that are not cut which is max.
// Therefore, we need to replace println(count); with println(max);<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Provide a fix for the buggy function

// Buggy Function
No.7 Patch
static void solve() {
	int n = nextInt();
	boolean[] b = new boolean[361];
	b[0] = true;
	b[360] = true;
	int pos = 0;
	
	for (int i=0; i<n; i++) {
		int temp = nextInt();
		pos += temp;
		pos %= 360;
		b[pos] = true;
	}
	
	int max = -1;
	int count = -1;
	for (int i=0; i<=360; i++) {
		if (b[i] == true) {
			max = Math.max(max, count);
			count = 1;
		}
		else {
			count++;
		}
	}
	println(max);
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>//src/main/java/com/alexandrecasrtilho/model/Address.java
package com.alexandrecasrtilho.model;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "tb_address")
public class Address implements Serializable {
	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String publicPlace;
	private String number;
	private String complement;
	private String district;
	private String zipCode;
	
	@JsonIgnore
	@ManyToOne
	@Join
No.8 Patch
static void solve () {
	
	int n = nextInt();
	boolean[] b = new boolean[361];
	b[0] = true;
	b[360] = true;
	int pos = 0;
	
	for (int i=0; i<n; i++) {
		int temp = nextInt();
		pos += temp;
		pos %= 360;
		b[pos] = true;
	}
	
	int max = -1;
	int count = -1;
	boolean flag = true;
	for (int i=0; i<=360; i++) {
		if (b[i] == true) {
			max = Math.max(max, count);
			count = 1;
		}
		else {
			count++;
		}
	}
	println(Math.max(max, count));
	
}<｜end▁of▁sentence｜><｜begin▁of▁sentence｜>// Provide a fix for the buggy function 

// Buggy Function
