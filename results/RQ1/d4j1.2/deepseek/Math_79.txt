No.2 Patch
public static double distance(int[] p1, int[] p2) {
  double sum = 0;
  for (int i = 0; i < p1.length; i++) {
      final double dp = p1[i] - p2[i];
      sum += dp * dp;
  }
  return Math.sqrt(sum);
}
No.8 Patch
public static double distance(int[] p1, int[] p2) {
  double sum = 0;
  for (int i = 0; i < p1.length; i++) {
      final int dp = p1[i] - p2[i];
      sum += (double) dp * dp;
  }
  return Math.sqrt(sum);
}
No.11 Patch
public static double distance(int[] p1, int[] p2) {
  long sum = 0;
  for (int i = 0; i < p1.length; i++) {
      final int dp = p1[i] - p2[i];
      sum += (long) dp * dp;
  }
  return Math.sqrt(sum);
}
No.18 Patch
public static double distance(int[] p1, int[] p2) {
  double sum = 0;
  for (int i = 0; i < p1.length; i++) {
      final int dp = p1[i] - p2[i];
      sum += Math.pow(dp, 2);
  }
  return Math.sqrt(sum);
}
No.23 Patch
public static double distance(int[] p1, int[] p2) {
  long sum = 0;
  for (int i = 0; i < p1.length; i++) {
      final int dp = p1[i] - p2[i];
      sum += (long)dp * dp;
  }
  return Math.sqrt(sum);
}
