No.0 Patch
public static long safeMultiply(long val1, int val2) {
    return Math.multiplyExact(val1, val2);
}
No.3 Patch
public static long safeMultiply(long val1, int val2) {
    long total = val1 * val2;
    if (val1 != 0 && total / val1 != val2) {
      throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
    }
    return total;
}
No.27 Patch
public static long safeMultiply(long val1, int val2) {
    try {
        return Math.multiplyExact(val1, val2);
    } catch (ArithmeticException e) {
        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
    }
}
No.37 Patch
public static long safeMultiply(long val1, int val2) {
    if (val2 == -1 && val1 == Long.MIN_VALUE) {
        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
    }
    long total = val1 * val2;
    if (val2 != 0 && total / val2 != val1) {
        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
    }
    return total;
}
No.49 Patch
public static long safeMultiply(long val1, int val2) {
    long total = val1 * val2;
    if (val1 != 0 && total / val1 != val2) {
        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
    }
    return total;
}
