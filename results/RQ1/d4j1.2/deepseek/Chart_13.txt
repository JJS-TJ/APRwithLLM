No.17 Patch
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    double[] w = new double[5];
    double[] h = new double[5];
    w[0] = constraint.getWidth();
    
    if (this.topBlock != null) {
        RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                LengthConstraintType.FIXED, 0.0,
                new Range(0.0, constraint.getHeight()),
                LengthConstraintType.RANGE);
        Size2D size = this.topBlock.arrange(g2, c1);
        h[0] = size.height;
        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
    }
    
    w[1] = w[0];
    if (this.bottomBlock != null) {
        RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                LengthConstraintType.FIXED, 0.0, new Range(0.0,
                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
        Size2D size = this.bottomBlock.arrange(g2, c2);
        h[1] = size.height;
        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
    }
    
    h[2] = constraint.getHeight() - h[1] - h[0];
    // similar layout and paint logic for leftBlock, rightBlock, centerBlock
    // ...
    return new Size2D(constraint.getWidth(), constraint.getHeight());
}
No.56 Patch
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {
    double[] w = {constraint.getWidth(), constraint.getWidth(), 0.0, 0.0, constraint.getWidth()};
    double[] h = {0.0, 0.0, constraint.getHeight(), 0.0, 0.0};

    if (this.topBlock != null) {
        arrangeBlock(this.topBlock, g2, constraint, w, h, 0, 0, 0.0, LengthConstraintType.FIXED, LengthConstraintType.RANGE);
    }
    if (this.bottomBlock != null) {
        arrangeBlock(this.bottomBlock, g2, constraint, w, h, 1, 0, h[0] + h[2], LengthConstraintType.FIXED, LengthConstraintType.RANGE);
    }
    if (this.leftBlock != null) {
        arrangeBlock(this.leftBlock, g2, constraint, w, h, 2, w[0], 0.0, LengthConstraintType.RANGE, LengthConstraintType.FIXED);
    }
    if (this.rightBlock != null) {
        arrangeBlock(this.rightBlock, g2, constraint, w, h, 3, w[2] + w[4], 0.0, LengthConstraintType.RANGE, LengthConstraintType.FIXED);
    }
    if (this.centerBlock != null) {
        arrangeBlock(this.centerBlock, g2, constraint, w, h, 4, w[2], h[0], LengthConstraintType.FIXED, LengthConstraintType.FIXED);
    }

    return new Size2D(constraint.getWidth(), constraint.getHeight());
}

private void arrangeBlock(Block block, Graphics2D g2, RectangleConstraint constraint, double[] w, double[] h, int index, double width, double height, LengthConstraintType widthType, LengthConstraintType heightType) {
    RectangleConstraint constraintBlock = new RectangleConstraint(width, new Range(0.0, widthType == LengthConstraintType.FIXED ? constraint.getHeight() : w[index]), widthType, height, new Range(0.0, heightType == LengthConstraintType.FIXED ? constraint.getWidth() : w[index]), heightType);
    Size2D size = block.arrange(g2, constraintBlock);
    if (widthType == LengthConstraintType.FIXED) {
        w[index] = size.width;
    } else {
        h[index] = size.height;
    }
    block.setBounds(new Rectangle2D.Double(widthType == LengthConstraintType.FIXED ? 0.0 : w[index], heightType == LengthConstraintType.FIXED ? 0.0 : h[index], size.width, size.height));
}
No.98 Patch
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    double[] w = new double[5];
    double[] h = new double[5];
    w[0] = constraint.getWidth();
    if (this.topBlock != null) {
        RectangleConstraint c1 = new RectangleConstraint(w[0], h[0]);
        Size2D size = this.topBlock.arrange(g2, c1);
        h[0] = size.height;
    }
    w[1] = w[0];
    if (this.bottomBlock != null) {
        RectangleConstraint c2 = new RectangleConstraint(w[0], constraint.getHeight() - h[0]);
        Size2D size = this.bottomBlock.arrange(g2, c2);
        h[1] = size.height;
    }
    h[2] = constraint.getHeight() - h[1] - h[0];
    if (this.leftBlock != null) {
        RectangleConstraint c3 = new RectangleConstraint(w[2], h[2]);
        Size2D size = this.leftBlock.arrange(g2, c3);
        w[2] = size.width;
    }
    h[3] = h[2];
    if (this.rightBlock != null) {
        RectangleConstraint c4 = new RectangleConstraint(constraint.getWidth() - w[2], h[2]);
        Size2D size = this.rightBlock.arrange(g2, c4);
        w[3] = size.width;
    }
    h[4] = h[2];
    w[4] = constraint.getWidth() - w[3] - w[2];
    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
    if (this.centerBlock != null) {
        this.centerBlock.arrange(g2, c5);
    }

    if (this.topBlock != null) {
        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                h[0]));
    }
    if (this.bottomBlock != null) {
        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                w[1], h[1]));
    }
    if (this.leftBlock != null) {
        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                h[2]));
    }
    if (this.rightBlock != null) {
        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                w[3], h[3]));
    }
    if (this.centerBlock != null) {
        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                h[4]));
    }
    return new Size2D(constraint.getWidth(), constraint.getHeight());
}
