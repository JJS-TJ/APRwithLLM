No.3 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  int nextNewLine = js.indexOf('\n', pos);
  if (nextNewLine == -1) {
    // If next new line cannot be found, return the rest of the file contents till the end.
    if (pos < js.length()) {
      return js.substring(pos);
    } else {
      return null;
    }
  } else {
    return js.substring(pos, nextNewLine);
  }
}
No.5 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    // NOTE(nicksantos): Right now, this is optimized for few warnings.
    // This is probably the right trade-off, but will be slow if there
    // are lots of warnings in one file.
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    // If pos already reaches the end of file, then null should be returned.
    return null;
  } else if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, return the rest of the content.
    return js.substring(pos);
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.12 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  int nextNewLine = js.indexOf('\n', pos);
  if (nextNewLine == -1) {
    if (pos == js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, nextNewLine);
  }
}
No.13 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
      return pos == js.length() ? null : js.substring(pos);
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.16 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    return null;
  } else {
    int end = js.indexOf('\n', pos);
    if (end == -1) {
      end = js.length();
    }
    return js.substring(pos, end);
  }
}
No.26 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    // NOTE(nicksantos): Right now, this is optimized for few warnings.
    // This is probably the right trade-off, but will be slow if there
    // are lots of warnings in one file.
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  int end = js.indexOf('\n', pos);
  if (end == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
    return (pos == js.length()) ? null : js.substring(pos);
  } else {
    return js.substring(pos, end);
  }
}
No.29 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
    if (pos >= js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.31 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (js.indexOf('\n', pos) == -1) {
    if (pos >= js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.39 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    // NOTE(nicksantos): Right now, this is optimized for few warnings.
    // This is probably the right trade-off, but will be slow if there
    // are lots of warnings in one file.
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
    if(pos >= js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.40 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  int nextNewLinePos = js.indexOf('\n', pos);
  if (nextNewLinePos == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then return null
    // 2. otherwise, return the contents between pos and the end of file.
    if (pos >= js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, nextNewLinePos);
  }
}
No.42 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    return null;
  }

  int endpos = js.indexOf('\n', pos);
  if (endpos == -1) {
    return js.substring(pos);
  } else {
    return js.substring(pos, endpos);
  }
}
No.43 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  // Check if pos is already at the end of file
  if (pos >= js.length()) {
    return null;
  }

  int endOfLine = js.indexOf('\n', pos);
  if (endOfLine == -1) {
    // If no next newline character, return the entire line
    return js.substring(pos);
  } else {
    return js.substring(pos, endOfLine);
  }
}
No.45 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber && pos < js.length(); n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos == js.length()) {
    // If pos is already at the end of the file, return null.
    return null;
  } else if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, return the contents between pos and the end of file.
    return js.substring(pos);
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.51 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    return null;
  } else {
    int nextNewLine = js.indexOf('\n', pos);
    return js.substring(pos, nextNewLine != -1 ? nextNewLine : js.length());
  }
}
No.58 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  int endPos = js.indexOf('\n', pos);
  if (endPos == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
    if (pos >= js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, endPos);
  }
}
No.60 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    // If pos is beyond the end of the string, return null
    return null;
  } else if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, return the contents between pos and the end of file.
    return js.substring(pos);
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.63 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  int nextNewLinePos = js.indexOf('\n', pos);
  if (nextNewLinePos == -1) {
    // If there is no next new line, then we have reached the end of the file.
    if (pos == js.length()) {
      return null;
    }
    // Otherwise, return the contents from pos to the end of the file.
    return js.substring(pos);
  } else {
    return js.substring(pos, nextNewLinePos);
  }
}
No.70 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    // If pos is already at or beyond the end of file, return null
    return null;
  } else {
    int nextNewLine = js.indexOf('\n', pos);
    if (nextNewLine == -1) {
      // If next new line cannot be found, return the contents between pos and the end of file.
      return js.substring(pos);
    } else {
      return js.substring(pos, nextNewLine);
    }
  }
}
No.80 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    // NOTE(nicksantos): Right now, this is optimized for few warnings.
    // This is probably the right trade-off, but will be slow if there
    // are lots of warnings in one file.
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (js.indexOf('\n', pos) == -1) {
    // If next new line cannot be found, there are two cases
    // 1. pos already reaches the end of file, then null should be returned
    // 2. otherwise, return the contents between pos and the end of file.
    if (pos == js.length()) {
      return null;
    } else {
      return js.substring(pos);
    }
  } else {
    return js.substring(pos, js.indexOf('\n', pos));
  }
}
No.83 Patch
public String getLine(int lineNumber) {
  String js = "";
  try {
    js = getCode();
  } catch (IOException e) {
    return null;
  }

  int pos = 0;
  int startLine = 1;

  // If we've saved a previous offset and it's for a line less than the
  // one we're searching for, then start at that point.
  if (lineNumber >= lastLine) {
    pos = lastOffset;
    startLine = lastLine;
  }

  for (int n = startLine; n < lineNumber; n++) {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      return null;
    }
    pos = nextpos + 1;
  }

  // Remember this offset for the next search we do.
  lastOffset = pos;
  lastLine = lineNumber;

  if (pos >= js.length()) {
    // If pos already reaches the end of file, null should be returned
    return null;
  } else {
    int nextpos = js.indexOf('\n', pos);
    if (nextpos == -1) {
      // If next new line cannot be found, return the contents between pos and the end of file.
      return js.substring(pos);
    } else {
      return js.substring(pos, nextpos);
    }
  }
}
