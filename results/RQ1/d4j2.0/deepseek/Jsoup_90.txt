No.30 Patch
private static boolean looksLikeUtf8(byte[] input) {
    int i = 0;
    // BOM:
    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
        && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
        i = 3;
    }

    int end;
    for (int j = input.length; i < j; ++i) {
        int o = input[i];
        if ((o & 0x80) == 0) {
            continue; // ASCII
        }

        // UTF-8 leading:
        if ((o & 0xE0) == 0xC0) {
            end = i + 1;
        } else if ((o & 0xF0) == 0xE0) {
            end = i + 2;
        } else if ((o & 0xF8) == 0xF0) {
            end = i + 3;
        } else {
            return false;
        }

        if (end > input.length) {
            return false;
        }

        while (i < end) {
            i++;
            o = input[i];
            if ((o & 0xC0) != 0x80) {
                return false;
            }
        }
    }
    return true;
}
No.74 Patch
private static boolean looksLikeUtf8(byte[] input) {
    int i = 0;
    // BOM:
    if (input.length >= 3 && input[0] == -17 && input[1] == -69 && input[2] == -65) {
        i = 3;
    }

    while (i < input.length) {
        int o = input[i];
        if ((o & 0x80) == 0) { // ASCII
            i++;
            continue;
        }

        // UTF-8 leading:
        if ((o & 0xE0) == 0xC0) {
            i += 2;
        } else if ((o & 0xF0) == 0xE0) {
            i += 3;
        } else if ((o & 0xF8) == 0xF0) {
            i += 4;
        } else {
            return false;
        }

        while (i < input.length) {
            if ((input[i] & 0xC0) != 0x80) {
                i++;
                break;
            }
            i++;
        }
    }
    return true;
}
