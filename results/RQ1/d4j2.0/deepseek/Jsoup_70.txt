No.1 Patch
static boolean preserveWhitespace(Node node) {
    // check all the way up the parent hierarchy
    while (node != null && node instanceof Element) {
        Element el = (Element) node;
        if (el.tag.preserveWhitespace()) {
            return true;
        }
        node = el.parent();
    }
    return false;
}
No.3 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
            if (el.tag.preserveWhitespace())
                return true;
            else {
                Node parent = el.parent();
                for (int i = 0; i < 5 && parent != null; i++) {
                    if (parent instanceof Element && ((Element) parent).tag.preserveWhitespace()) {
                        return true;
                    }
                    parent = parent.parent();
                }
            }
    }
    return false;
}
No.7 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        int count = 0;
        while (el != null && count <= 5) {
            if (el.tag.preserveWhitespace())
                return true;
            el = el.parent();
            count++;
        }
    }
    return false;
}
No.19 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        if (el.tag.preserveWhitespace())
            return true;
        else {
            Element parent = el.parent();
            return parent != null && (parent.tag.preserveWhitespace() || preserveWhitespace(parent));
        }
    }
    return false;
}
No.38 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        if (el.tag.preserveWhitespace())
            return true;
        else {
            Node parent = el.parent();
            for (int i = 0; i < 5 && parent != null; i++) {
                if (parent instanceof Element && ((Element) parent).tag.preserveWhitespace())
                    return true;
                parent = parent.parent();
            }
        }
    }
    return false;
}
No.39 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
            if (el.tag.preserveWhitespace())
                return true;
            else {
                Node parent = el.parent();
                for (int i = 0; i < 5 && parent != null; i++) {
                    if (parent instanceof Element && ((Element)parent).tag.preserveWhitespace())
                        return true;
                    parent = parent.parent();
                }
            }
    }
    return false;
}
No.44 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
            if (el.tag().preserveWhitespace())
                return true;
            else {
                Element parent = el.parent();
                for (int i = 0; i < 5 && parent != null; i++) {
                    if (parent.tag().preserveWhitespace()) {
                        return true;
                    }
                    parent = parent.parent();
                }
            }
    }
    return false;
}
No.51 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        int count = 0;
        while (el != null && count < 5) {
            if (el.tag.preserveWhitespace())
                return true;
            el = el.parent();
            count++;
        }
        return false;
    }
    return false;
}
No.57 Patch
static boolean preserveWhitespace(Node node) {
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        return el.tag.preserveWhitespace() || (el.parent() != null && preserveWhitespace(el.parent()));
    }
    return false;
}
No.63 Patch
static boolean preserveWhitespace(Node node) {
    // looks all the way up to the root, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
        if (el.tag.preserveWhitespace())
            return true;
        else
            return preserveWhitespace(el.parent());
    }
    return false;
}
No.65 Patch
static boolean preserveWhitespace(Node node) {
    // looks only at this element and five levels up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element el = (Element) node;
            if (el.tag.preserveWhitespace())
                return true;
            else {
                // Recursively check parent nodes
                for (int i = 0; i < 5; i++) {
                    el = el.parent();
                    if (el == null)
                        break;
                    if (el.tag.preserveWhitespace())
                        return true;
                }
                return false;
            }
    }
    return false;
}
