No.10 Patch
ecma_value_t
ecma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */
                            ecma_object_t *new_target_p, /**< new target */
                            const ecma_value_t *arguments_list_p, /**< arguments list */
                            uint32_t arguments_list_len) /**< length of arguments list */
{
  JERRY_ASSERT (func_obj_p != NULL && !ecma_is_lexical_environment (func_obj_p));

  if (func_obj_p == new_target_p)
  {
    return ECMA_VALUE_UNDEFINED;
  }

  switch (ecma_get_object_type (func_obj_p))
  {
    case ECMA_OBJECT_TYPE_FUNCTION:
    {
      return ecma_op_function_construct_simple (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
    {
      return ecma_op_function_construct_built_in (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
#if JERRY_BUILTIN_PROXY
    case ECMA_OBJECT_TYPE_PROXY:
    {
      return ecma_proxy_object_construct (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
#endif /* JERRY_BUILTIN_PROXY */
#if JERRY_ESNEXT
    case ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION:
    {
      return ecma_op_function_construct_constructor (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
#endif /* JERRY_ESNEXT */
    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
    {
      return ecma_op_function_construct_bound (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
    {
      return ecma_op_function_construct_native (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
    }
    default:
    {
      JERRY_UNREACHABLE ();
    }
  }

  return ECMA_VALUE_UNDEFINED;
} /* ecma_op_function_construct */

/* Provide a fix for the buggy function */
