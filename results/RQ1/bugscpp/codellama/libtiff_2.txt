No.8 Patch
int
readextension(void)
{
    int count;
    char buf[255];
    int status = 1;

    (void) getc(infile);
    while ((count = getc(infile)) != EOF && count <= 255)
        if (fread(buf, 1, count, infile) != (size_t) count) {
            fprintf(stderr, "short read from file %s (%s)\n",
                    filename, strerror(errno));
            status = 0;
            break;
        }
    return status;
}

/* Provide a fix for the buggy function */
No.44 Patch
int
readextension(void)
{
    int count;
    char buf[255];
    int status = 1;

    if( getc(infile) < 0 )
        return status;
    while ((count = getc(infile)) && count <= 255)
        if (fread(buf, 1, count, infile) != (size_t) count) {
            fprintf(stderr, "short read from file %s (%s)\n",
                    filename, strerror(errno));
            status = 0;
            break;
        }
    return status;
}

/* Provide a fix for the buggy function */
No.56 Patch
int
readextension(void)
{
    int count;
    char buf[255];
    int status = 1;

    /* if count is 0 or 1, it means there is no extension, so return 1 */
    if( (count = getc(infile)) <= 1 )
        return 1;

    (void) getc(infile);
    while ((count = getc(infile)) && count <= 255)
        if (fread(buf, 1, count, infile) != (size_t) count) {
            fprintf(stderr, "short read from file %s (%s)\n",
                    filename, strerror(errno));
            status = 0;
            break;
        }
    return status;
}

/* Provide a fix for the buggy function */
No.60 Patch
int
readextension(void)
{
    int count;
    char buf[255];
    int status = 1;

    if (getc(infile) == 0) {
        while ((count = getc(infile)) && count <= 255)
            if (fread(buf, 1, count, infile) != (size_t) count) {
                fprintf(stderr, "short read from file %s (%s)\n",
                    filename, strerror(errno));
                status = 0;
                break;
            }
    }
    return status;
}

/* Provide a fix for the buggy function */
