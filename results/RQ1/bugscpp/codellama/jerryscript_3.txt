No.6 Patch
ecma_value_t
ecma_regexp_match_helper (ecma_value_t this_arg, /**< this argument */
                          ecma_value_t string_arg) /**< source string */
{
  if (!ecma_is_value_object (this_arg))
  {
    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
  }

  ecma_string_t *str_p = ecma_op_to_string (string_arg);

  if (JERRY_UNLIKELY (str_p == NULL))
  {
    return ECMA_VALUE_ERROR;
  }

  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);

  ecma_value_t global_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_GLOBAL);

  if (ECMA_IS_VALUE_ERROR (global_value))
  {
    ecma_deref_ecma_string (str_p);
    return global_value;
  }

  bool global = ecma_op_to_boolean (global_value);

  ecma_free_value (global_value);

  if (!global)
  {
    ecma_value_t result = ecma_op_regexp_exec (this_arg, str_p);
    ecma_deref_ecma_string (str_p);
    return result;
  }

#if JERRY_ESNEXT
  ecma_value_t full_unicode_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_UNICODE);

  if (ECMA_IS_VALUE_ERROR (full_unicode_value))
  {
    ecma_deref_ecma_string (str_p);
    return full_unicode_value;
  }

  bool full_unicode = ecma_op_to_boolean (full_unicode_value);

  ecma_free_value (full_unicode_value);
#endif /* JERRY_ESNEXT */

  ecma_value_t set_status = ecma_op_object_put (obj_p,
                                                ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                ecma_make_uint32_value (0),
                                                true);

  if (ECMA_IS_VALUE_ERROR (set_status))
  {
    ecma_deref_ecma_string (str_p);
    return set_status;
  }

  ecma_value_t ret_value = ECMA_VALUE_ERROR;
  ecma_object_t *result_array_p = ecma_op_new_array_object (0);
  uint32_t n = 0;

  while (true)
  {
    ecma_value_t result_value = ecma_op_regexp_exec (this_arg, str_p);

    if (ECMA_IS_VALUE_ERROR (result_value))
    {
      goto result_cleanup;
    }

    if (ecma_is_value_null (result_value))
    {
      if (n == 0)
      {
        ret_value = ECMA_VALUE_NULL;
        goto result_cleanup;
      }

      ecma_deref_ecma_string (str_p);
      return ecma_make_object_value (result_array_p);
    }

    ecma_object_t *result_value_p = ecma_get_object_from_value (result_value);
    ecma_value_t match_value = ecma_op_object_get_by_index (result_value_p, 0);

    ecma_deref_object (result_value_p);

    if (ECMA_IS_VALUE_ERROR (match_value))
    {
      goto result_cleanup;
    }

    ecma_string_t *match_str_p = ecma_op_to_string (match_value);
    ecma_free_value (match_value);

    if (JERRY_UNLIKELY (match_str_p == NULL))
    {
      goto result_cleanup;
    }

    ecma_value_t new_prop = ecma_builtin_helper_def_prop_by_index (result_array_p,
                                                                   n,
                                                                   ecma_make_string_value (match_str_p),
                                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);

    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_prop));

    const bool is_match_empty = ecma_string_is_empty (match_str_p);
    ecma_deref_ecma_string (match_str_p);

    if (is_match_empty)
    {
      ecma_value_t last_index = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_LASTINDEX_UL);

      if (ECMA_IS_VALUE_ERROR (last_index))
      {
        goto result_cleanup;
      }

#if JERRY_ESNEXT
      ecma_length_t index;
      ecma_value_t length_value = ecma_op_to_length (last_index, &index);

      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (length_value))
      {
        goto result_cleanup;
      }

      index = ecma_op_advance_string_index (str_p, index, full_unicode);

      last_index = ecma_make_length_value (index);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p, ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL), last_index, true);
#else /* !JERRY_ESNEXT */
      ecma_number_t index = ecma_get_number_from_value (last_index);
      ecma_free_value (last_index);

      last_index = ecma_make_number_value (index + 1);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p,
                                                         ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                         last_index,
                                                         true);

#endif /* JERRY_ESNEXT */
      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (next_set_status))
      {
        goto result_cleanup;
      }
    }

    n++;
  }

result_cleanup:
  ecma_deref_ecma_string (str_p);
  ecma_deref_object (result_array_p);
  return ret_value;
} /* ecma_regexp_match_helper */

/* Provide a fix for the buggy function */
No.7 Patch
ecma_value_t
ecma_regexp_match_helper (ecma_value_t this_arg, /**< this argument */
                          ecma_value_t string_arg) /**< source string */
{
  if (!ecma_is_value_object (this_arg))
  {
    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
  }

  ecma_string_t *str_p = ecma_op_to_string (string_arg);

  if (JERRY_UNLIKELY (str_p == NULL))
  {
    return ECMA_VALUE_ERROR;
  }

  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);

  ecma_value_t global_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_GLOBAL);

  if (ECMA_IS_VALUE_ERROR (global_value))
  {
    ecma_deref_ecma_string (str_p);
    return global_value;
  }

  bool global = ecma_op_to_boolean (global_value);

  ecma_free_value (global_value);

  if (!global)
  {
    ecma_value_t result = ecma_op_regexp_exec (this_arg, str_p);
    ecma_deref_ecma_string (str_p);
    return result;
  }

#if JERRY_ESNEXT
  ecma_value_t full_unicode_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_UNICODE);

  if (ECMA_IS_VALUE_ERROR (full_unicode_value))
  {
    ecma_deref_ecma_string (str_p);
    return full_unicode_value;
  }

  bool full_unicode = ecma_op_to_boolean (full_unicode_value);

  ecma_free_value (full_unicode_value);
#endif /* JERRY_ESNEXT */

  ecma_value_t set_status = ecma_op_object_put (obj_p,
                                                ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                ecma_make_uint32_value (0),
                                                true);

  if (ECMA_IS_VALUE_ERROR (set_status))
  {
    ecma_deref_ecma_string (str_p);
    return set_status;
  }

  ecma_value_t ret_value = ECMA_VALUE_ERROR;
  ecma_object_t *result_array_p = ecma_op_new_array_object (0);
  uint32_t n = 0;

  while (true)
  {
    ecma_value_t result_value = ecma_op_regexp_exec (this_arg, str_p);

    if (ECMA_IS_VALUE_ERROR (result_value))
    {
      goto result_cleanup;
    }

    if (ecma_is_value_null (result_value))
    {
      if (n == 0)
      {
        ret_value = ECMA_VALUE_NULL;
        goto result_cleanup;
      }

      ecma_deref_ecma_string (str_p);
      return ecma_make_object_value (result_array_p);
    }

    ecma_object_t *result_value_p = ecma_get_object_from_value (result_value);
    ecma_value_t match_value = ecma_op_object_get_by_index (result_value_p, 0);

    ecma_deref_object (result_value_p);

    if (ECMA_IS_VALUE_ERROR (match_value))
    {
      goto result_cleanup;
    }

    ecma_string_t *match_str_p = ecma_op_to_string (match_value);
    ecma_free_value (match_value);

    if (JERRY_UNLIKELY (match_str_p == NULL))
    {
      goto result_cleanup;
    }

    ecma_value_t new_prop = ecma_builtin_helper_def_prop_by_index (result_array_p,
                                                                   n,
                                                                   ecma_make_string_value (match_str_p),
                                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);

    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_prop));

    const bool is_match_empty = ecma_string_is_empty (match_str_p);
    ecma_deref_ecma_string (match_str_p);

    if (is_match_empty)
    {
#if JERRY_ESNEXT
      ecma_length_t index;
      ecma_value_t length_value = ecma_op_to_length (ecma_make_uint32_value (n), &index);

      if (ECMA_IS_VALUE_ERROR (length_value))
      {
        goto result_cleanup;
      }

      index = ecma_op_advance_string_index (str_p, index, full_unicode);

      ecma_value_t next_set_status = ecma_op_object_put (obj_p, ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL), ecma_make_length_value(index), true);
#else /* !JERRY_ESNEXT */
      ecma_value_t next_set_status = ecma_op_object_put (obj_p,
                                                         ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                         ecma_make_uint32_value (n + 1),
                                                         true);
#endif /* JERRY_ESNEXT */

      if (ECMA_IS_VALUE_ERROR (next_set_status))
      {
        goto result_cleanup;
      }
    }

    n++;
  }

result_cleanup:
  ecma_deref_ecma_string (str_p);
  ecma_deref_object (result_array_p);
  return ret_value;
} /* ecma_regexp_match_helper */

/* Provide a fix for the buggy function */
No.9 Patch
ecma_value_t
ecma_regexp_match_helper (ecma_value_t this_arg, /**< this argument */
                          ecma_value_t string_arg) /**< source string */
{
  if (!ecma_is_value_object (this_arg))
  {
    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
  }

  ecma_string_t *str_p = ecma_op_to_string (string_arg);

  if (JERRY_UNLIKELY (str_p == NULL))
  {
    return ECMA_VALUE_ERROR;
  }

  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);

  ecma_value_t global_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_GLOBAL);

  if (ECMA_IS_VALUE_ERROR (global_value))
  {
    ecma_deref_ecma_string (str_p);
    return global_value;
  }

  bool global = ecma_op_to_boolean (global_value);

  ecma_free_value (global_value);

  if (!global)
  {
    ecma_value_t result = ecma_op_regexp_exec (this_arg, str_p);
    ecma_deref_ecma_string (str_p);
    return result;
  }

#if JERRY_ESNEXT
  ecma_value_t full_unicode_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_UNICODE);

  if (ECMA_IS_VALUE_ERROR (full_unicode_value))
  {
    ecma_deref_ecma_string (str_p);
    return full_unicode_value;
  }

  bool full_unicode = ecma_op_to_boolean (full_unicode_value);

  ecma_free_value (full_unicode_value);
#endif /* JERRY_ESNEXT */

  ecma_value_t set_status = ecma_op_object_put (obj_p,
                                                ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                ecma_make_uint32_value (0),
                                                true);

  if (ECMA_IS_VALUE_ERROR (set_status))
  {
    ecma_deref_ecma_string (str_p);
    return set_status;
  }

  ecma_value_t ret_value = ECMA_VALUE_ERROR;
  ecma_object_t *result_array_p = ecma_op_new_array_object (0);
  uint32_t n = 0;

  while (true)
  {
    ecma_value_t result_value = ecma_op_regexp_exec (this_arg, str_p);

    if (ECMA_IS_VALUE_ERROR (result_value))
    {
      goto result_cleanup;
    }

    if (ecma_is_value_null (result_value))
    {
      if (n == 0)
      {
        ret_value = ECMA_VALUE_NULL;
        goto result_cleanup;
      }

      ecma_deref_ecma_string (str_p);
      return ecma_make_object_value (result_array_p);
    }

    ecma_object_t *result_value_p = ecma_get_object_from_value (result_value);
    ecma_value_t match_value = ecma_op_object_get_by_index (result_value_p, 0);

    ecma_deref_object (result_value_p);

    if (ECMA_IS_VALUE_ERROR (match_value))
    {
      goto result_cleanup;
    }

    ecma_string_t *match_str_p = ecma_op_to_string (match_value);
    ecma_free_value (match_value);

    if (JERRY_UNLIKELY (match_str_p == NULL))
    {
      goto result_cleanup;
    }

    ecma_value_t new_prop = ecma_builtin_helper_def_prop_by_index (result_array_p,
                                                                   n,
                                                                   ecma_make_string_value (match_str_p),
                                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);

    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_prop));

    const bool is_match_empty = ecma_string_is_empty (match_str_p);
    ecma_deref_ecma_string (match_str_p);

    if (is_match_empty)
    {
      ecma_value_t last_index = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_LASTINDEX_UL);

      if (ECMA_IS_VALUE_ERROR (last_index))
      {
        goto result_cleanup;
      }

#if JERRY_ESNEXT
      ecma_length_t index;
      ecma_value_t length_value = ecma_op_to_length (last_index, &index);

      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (length_value))
      {
        goto result_cleanup;
      }

      index = ecma_op_advance_string_index (str_p, index, full_unicode);

      last_index = ecma_make_length_value (index);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p, ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL), last_index, true);
#else /* !JERRY_ESNEXT */
      ecma_number_t index = ecma_get_number_from_value (last_index);
      ecma_free_value (last_index);

      last_index = ecma_make_number_value (index + 1);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p,
                                                         ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                         last_index,
                                                         true);

#endif /* JERRY_ESNEXT */
      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (next_set_status))
      {
        goto result_cleanup;
      }
    }

    n++;
  }

result_cleanup:
  ecma_deref_ecma_string (str_p);
  ecma_deref_object (result_array_p);
  return ret_value;
} /* ecma_regexp_match_helper */
No.10 Patch
ecma_value_t
ecma_regexp_match_helper (ecma_value_t this_arg, /**< this argument */
                          ecma_value_t string_arg) /**< source string */
{
  if (!ecma_is_value_object (this_arg))
  {
    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
  }

  ecma_string_t *str_p = ecma_op_to_string (string_arg);

  if (JERRY_UNLIKELY (str_p == NULL))
  {
    return ECMA_VALUE_ERROR;
  }

  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);

  ecma_value_t global_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_GLOBAL);

  if (ECMA_IS_VALUE_ERROR (global_value))
  {
    ecma_deref_ecma_string (str_p);
    return global_value;
  }

  bool global = ecma_op_to_boolean (global_value);

  ecma_free_value (global_value);

  if (!global)
  {
    ecma_value_t result = ecma_op_regexp_exec (this_arg, str_p);
    ecma_deref_ecma_string (str_p);
    return result;
  }

#if JERRY_ESNEXT
  ecma_value_t full_unicode_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_UNICODE);

  if (ECMA_IS_VALUE_ERROR (full_unicode_value))
  {
    ecma_deref_ecma_string (str_p);
    return full_unicode_value;
  }

  bool full_unicode = ecma_op_to_boolean (full_unicode_value);

  ecma_free_value (full_unicode_value);
#endif /* JERRY_ESNEXT */

  ecma_value_t set_status = ecma_op_object_put (obj_p,
                                                ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                ecma_make_uint32_value (0),
                                                true);

  if (ECMA_IS_VALUE_ERROR (set_status))
  {
    ecma_deref_ecma_string (str_p);
    return set_status;
  }

  ecma_value_t ret_value = ECMA_VALUE_ERROR;
  ecma_object_t *result_array_p = ecma_op_new_array_object (0);
  uint32_t n = 0;

  while (true)
  {
    ecma_value_t result_value = ecma_op_regexp_exec (this_arg, str_p);

    if (ECMA_IS_VALUE_ERROR (result_value))
    {
      goto result_cleanup;
    }

    if (ecma_is_value_null (result_value))
    {
      if (n == 0)
      {
        ret_value = ECMA_VALUE_NULL;
        goto result_cleanup;
      }

      ecma_deref_ecma_string (str_p);
      return ecma_make_object_value (result_array_p);
    }

    ecma_object_t *result_value_p = ecma_get_object_from_value (result_value);
    ecma_value_t match_value = ecma_op_object_get_by_index (result_value_p, 0);

    ecma_deref_object (result_value_p);

    if (ECMA_IS_VALUE_ERROR (match_value))
    {
      goto result_cleanup;
    }

    ecma_string_t *match_str_p = ecma_op_to_string (match_value);
    ecma_free_value (match_value);

    if (JERRY_UNLIKELY (match_str_p == NULL))
    {
      goto result_cleanup;
    }

    ecma_value_t new_prop = ecma_builtin_helper_def_prop_by_index (result_array_p,
                                                                   n,
                                                                   ecma_make_string_value (match_str_p),
                                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);

    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_prop));

    const bool is_match_empty = ecma_string_is_empty (match_str_p);
    ecma_deref_ecma_string (match_str_p);

    if (is_match_empty)
    {
#if JERRY_ESNEXT
      ecma_length_t index;
      ecma_value_t length_value = ecma_op_to_length (ecma_make_object_value (result_array_p), &index);

      if (ECMA_IS_VALUE_ERROR (length_value))
      {
        goto result_cleanup;
      }

      index = ecma_op_advance_string_index (str_p, index, full_unicode);

      ecma_value_t next_set_status = ecma_op_object_put (obj_p, ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL), ecma_make_length_value(index), true);
#else /* !JERRY_ESNEXT */
      ecma_number_t index = ecma_get_number_from_value (ecma_make_object_value (result_array_p));
      ecma_number_t index_num = index + 1;

      ecma_value_t next_set_status = ecma_op_object_put (obj_p,
                                                         ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                         ecma_make_number_value (index_num),
                                                         true);
#endif /* JERRY_ESNEXT */
      if (ECMA_IS_VALUE_ERROR (next_set_status))
      {
        goto result_cleanup;
      }
    }

    n++;
  }

result_cleanup:
  ecma_deref_ecma_string (str_p);
  ecma_deref_object (result_array_p);
  return ret_value;
} /* ecma_regexp_match_helper */

/* Provide a fix for the buggy function */
No.13 Patch
ecma_value_t
ecma_regexp_match_helper (ecma_value_t this_arg, /**< this argument */
                          ecma_value_t string_arg) /**< source string */
{
  if (!ecma_is_value_object (this_arg))
  {
    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
  }

  ecma_string_t *str_p = ecma_op_to_string (string_arg);

  if (JERRY_UNLIKELY (str_p == NULL))
  {
    return ECMA_VALUE_ERROR;
  }

  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);

  ecma_value_t global_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_GLOBAL);

  if (ECMA_IS_VALUE_ERROR (global_value))
  {
    ecma_deref_ecma_string (str_p);
    return global_value;
  }

  bool global = ecma_op_to_boolean (global_value);

  ecma_free_value (global_value);

  if (!global)
  {
    ecma_value_t result = ecma_op_regexp_exec (this_arg, str_p);
    ecma_deref_ecma_string (str_p);
    return result;
  }

#if JERRY_ESNEXT
  ecma_value_t full_unicode_value = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_UNICODE);

  if (ECMA_IS_VALUE_ERROR (full_unicode_value))
  {
    ecma_deref_ecma_string (str_p);
    return full_unicode_value;
  }

  bool full_unicode = ecma_op_to_boolean (full_unicode_value);

  ecma_free_value (full_unicode_value);
#endif /* JERRY_ESNEXT */

  ecma_value_t set_status = ecma_op_object_put (obj_p,
                                                ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                ecma_make_uint32_value (0),
                                                true);

  if (ECMA_IS_VALUE_ERROR (set_status))
  {
    ecma_deref_ecma_string (str_p);
    return set_status;
  }

  ecma_value_t ret_value = ECMA_VALUE_ERROR;
  ecma_object_t *result_array_p = ecma_op_new_array_object (0);
  uint32_t n = 0;

  while (true)
  {
    ecma_value_t result_value = ecma_op_regexp_exec (this_arg, str_p);

    if (ECMA_IS_VALUE_ERROR (result_value))
    {
      goto result_cleanup;
    }

    if (ecma_is_value_null (result_value))
    {
      if (n == 0)
      {
        ret_value = ECMA_VALUE_NULL;
        goto result_cleanup;
      }

      ecma_deref_ecma_string (str_p);
      return ecma_make_object_value (result_array_p);
    }

    ecma_object_t *result_value_p = ecma_get_object_from_value (result_value);
    ecma_value_t match_value = ecma_op_object_get_by_index (result_value_p, 0);

    ecma_deref_object (result_value_p);

    if (ECMA_IS_VALUE_ERROR (match_value))
    {
      goto result_cleanup;
    }

    ecma_string_t *match_str_p = ecma_op_to_string (match_value);
    ecma_free_value (match_value);

    if (JERRY_UNLIKELY (match_str_p == NULL))
    {
      goto result_cleanup;
    }

    ecma_value_t new_prop = ecma_builtin_helper_def_prop_by_index (result_array_p,
                                                                   n,
                                                                   ecma_make_string_value (match_str_p),
                                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);

    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_prop));

    const bool is_match_empty = ecma_string_is_empty (match_str_p);
    ecma_deref_ecma_string (match_str_p);

    if (is_match_empty)
    {
      ecma_value_t last_index = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_LASTINDEX_UL);

      if (ECMA_IS_VALUE_ERROR (last_index))
      {
        goto result_cleanup;
      }

#if JERRY_ESNEXT
      ecma_length_t index;
      ecma_value_t length_value = ecma_op_to_length (last_index, &index);

      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (length_value))
      {
        goto result_cleanup;
      }

      index = ecma_op_advance_string_index (str_p, index, full_unicode);

      last_index = ecma_make_length_value (index);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p, ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL), last_index, true);
#else /* !JERRY_ESNEXT */
      ecma_number_t index = ecma_get_number_from_value (last_index);
      ecma_free_value (last_index);

      last_index = ecma_make_number_value (index + 1);
      ecma_value_t next_set_status = ecma_op_object_put (obj_p,
                                                         ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
                                                         last_index,
                                                         true);
#endif /* JERRY_ESNEXT */
      ecma_free_value (last_index);

      if (ECMA_IS_VALUE_ERROR (next_set_status))
      {
        goto result_cleanup;
      }
    }

    n++;
  }

result_cleanup:
  ecma_deref_ecma_string (str_p);
  ecma_deref_object (result_array_p);
  return ret_value;
} /* ecma_regexp_match_helper */

/* Provide a fix for the buggy function */
